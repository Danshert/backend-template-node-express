// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

enum Role {
  USER_ROLE
  ADMIN_ROLE
}

model User {
  id String @id @default(uuid())
  name String @db.VarChar(200)
  email String @unique
  password String @db.VarChar(100)
  emailValidated Boolean @default(false)
  imageUrl String?
  role Role[] @default([USER_ROLE])
  createdAt DateTime @db.Timestamp() @default(now())
  updatedAt DateTime @db.Timestamp() @default(now())

  board Board[]
  Label Label[]
  Task Task[]
  Notification Notification[]
}

model Board {
  id String @id @default(uuid())
  name String @db.VarChar(200)
  isActive Boolean @default(true)
  createdAt DateTime @db.Timestamp() @default(now())
  updatedAt DateTime @db.Timestamp() @default(now())

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  Label Label[]
  Task Task[]
  Notification Notification[]
}

model Label {
  id String @id @default(uuid())
  name String @db.VarChar(50)
  color String? @db.VarChar(20)

  userId String
  user User @relation(fields: [userId], references: [id])

  boardId String
  board Board @relation(fields: [boardId], references: [id], onDelete: Cascade)

  LabelsOnTask LabelsOnTask[]
}

enum TaskStatus {
  TODO
  DOING
  DONE
}

enum ReminderTime {
  NONE
  FIVE_MINS
  TEN_MINS
  FIFTEEN_MINS
  THIRTY_MINS
  ONE_HOUR
  TWO_HOURS
  ONE_DAY
  TWO_DAYS
}

model Task {
  id String @id @default(uuid())
  title String @db.VarChar(200)
  description String?
  imageUrl String?
  status TaskStatus @default(TODO)
  startDate DateTime? @db.Timestamp()
  endDate DateTime? @db.Timestamp()
  reminderTime ReminderTime @default(NONE)
  notificationCreated Boolean @default(false)
  createdAt DateTime @db.Timestamp() @default(now())
  updatedAt DateTime @db.Timestamp() @default(now())
  isActive Boolean @default(true)

  color String? @db.VarChar(20)

  userId String
  user User @relation(fields: [userId], references: [id])

  boardId String
  board Board @relation(fields: [boardId], references: [id], onDelete: Cascade)

  labels LabelsOnTask[]
  Notigication Notification[]
}

model LabelsOnTask {
  label Label @relation(fields: [labelId], references: [id])
  labelId String

  task Task @relation(fields: [taskId], references: [id])
  taskId String

  @@id([labelId, taskId])
}

model Notification {
  id String @id @default(uuid())
  message String @db.VarChar(500)
  seen Boolean @default(false)
  createdAt DateTime @db.Timestamp() @default(now())

  userId String
  user User @relation(fields: [userId], references: [id])

  boardId String
  board Board @relation(fields: [boardId], references: [id], onDelete: Cascade)

  taskId String
  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)

}